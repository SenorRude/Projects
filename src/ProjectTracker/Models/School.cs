//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectTracker.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    
    public partial class School
    {
        public School()
        {
            this.Projects = new HashSet<Project>();
            this.Employees = new HashSet<Employee>();
        }

        public const int UNASSIGNED_ID = 0;

        #region DB ATTRIBUTES

        [Required,
         Display(Name = "School ID")]
        public int School_Id { get; set; }

        [Required,
         StringLength(64, ErrorMessage = Helpers.TOO_LONG)]
        public string Name { get; set; }

        [Required,
         Display(Name = "Short Name"),
         StringLength(10, ErrorMessage = Helpers.TOO_LONG)]
        public string Short_Name { get; set; }

        [Display(Name = "Contact Name"),
         StringLength(64, ErrorMessage = Helpers.TOO_LONG)]
        public string Contact_Name { get; set; }

        [Display(Name = "Contact Title"),
         StringLength(64, ErrorMessage = Helpers.TOO_LONG)]
        public string Contact_Title { get; set; }

        [EmailAddress,
         StringLength(64, ErrorMessage = Helpers.TOO_LONG)]
        public string Email { get; set; }

        [Phone,
         StringLength(32, ErrorMessage = Helpers.TOO_LONG)]
        public string Phone { get; set; }

        [StringLength(32, ErrorMessage = Helpers.TOO_LONG)]
        public string Fax { get; set; }

        [StringLength(64, ErrorMessage = Helpers.TOO_LONG)]
        public string Street { get; set; }

        [StringLength(64, ErrorMessage = Helpers.TOO_LONG)]
        public string City { get; set; }

        [StringLength(32, ErrorMessage = Helpers.TOO_LONG)]
        public string State { get; set; }

        [StringLength(10, ErrorMessage = Helpers.TOO_LONG)]
        public string Zip { get; set; }

        #endregion // DB ATTRIBUTES

        #region NAVIGATION PROPERTIES

        public virtual ICollection<Project> Projects { get; set; }
        public virtual ICollection<Employee> Employees { get; set; }

        #endregion // NAVIGATION PROPERTIES

        #region CUSTOM

        public string Contact
        {
            get
            {
                string fullContact = Contact_Name;
                if (!string.IsNullOrWhiteSpace(Contact_Title))
                {
                    if (!string.IsNullOrWhiteSpace(fullContact))
                        fullContact += ", ";
                    fullContact += Contact_Title;
                }
                return fullContact;
            }
        }

        public string Address
        {
            get
            {
                string fullAddr = Street;
                if (!string.IsNullOrWhiteSpace(City))
                {
                    if (!string.IsNullOrWhiteSpace(fullAddr))
                        fullAddr += ", ";
                    fullAddr += City;
                }
                if (!string.IsNullOrWhiteSpace(State))
                {
                    if (!string.IsNullOrWhiteSpace(fullAddr))
                        fullAddr += ", ";
                    fullAddr += State;
                }
                if (!string.IsNullOrWhiteSpace(Zip))
                {
                    if (!string.IsNullOrWhiteSpace(fullAddr))
                        fullAddr += " ";
                    fullAddr += Zip;
                }
                return fullAddr;
            }
        }

        [Display(Name = "Contact Info")]
        public string ContactInfo
        {
            get
            {
                string fullInfo = Contact;
                if (!string.IsNullOrWhiteSpace(Email))
                {
                    if (!string.IsNullOrWhiteSpace(fullInfo))
                        fullInfo += Environment.NewLine;
                    fullInfo += Email;
                }
                if (!string.IsNullOrWhiteSpace(Phone))
                {
                    if (!string.IsNullOrWhiteSpace(fullInfo))
                        fullInfo += Environment.NewLine;
                    fullInfo += Phone;
                }
                if (!string.IsNullOrWhiteSpace(Fax))
                {
                    if (!string.IsNullOrWhiteSpace(fullInfo))
                        fullInfo += Environment.NewLine;
                    fullInfo += Fax + " (Fax)";
                }
                if (!string.IsNullOrWhiteSpace(Address))
                {
                    if (!string.IsNullOrWhiteSpace(fullInfo))
                        fullInfo += Environment.NewLine;
                    fullInfo += Address;
                }
                return fullInfo;
            }
        }

        public ICollection<Employee> Ambassadors
        {
            get { return GetEmployeesInRole(Role.Enum.Ambassador); }
        }

        public ICollection<Employee> Mentors
        {
            get { return GetEmployeesInRole(Role.Enum.Mentor); }
        }

        private ICollection<Employee> GetEmployeesInRole(Role.Enum role)
        {
            List<Employee> list = new List<Employee>();
            foreach (Employee e in Employees)
            {
                if (e.Role.Is(role) && !list.Contains(e))
                    list.Add(e);
            }
            return list;
        }

        #endregion // CUSTOM
    }
}
