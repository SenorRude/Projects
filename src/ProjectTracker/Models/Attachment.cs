//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectTracker.Models
{
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.IO;
    using System.Web;
    using System.Web.Mvc;
    
    public partial class Attachment
    {
        #region DB ATTRIBUTES

        [Required,
         Display(Name = "Attachment ID")]
        public int Attachment_Id { get; set; }

        [Required,
         Display(Name = "File")]
        public string Name { get; set; }

        [Required,
         Display(Name = "Project ID")]
        public int Project_Id { get; set; }

        [Required,
         Display(Name = "Uploader ID")]
        public int Uploader_Id { get; set; }

        [Required,
         Display(Name = "Uploaded")]
        public DateTime Upload_Date { get; set; }
        
        [Required,
         Display(Name = "Content Type")]
        public string Content_Type { get; set; }

        #endregion // DB ATTRIBUTES

        #region NAVIGATION PROPERTIES

        public virtual Project Project { get; set; }
        public virtual Employee Uploader { get; set; }

        #endregion // NAVIGATION PROPERTIES

        #region CUSTOM

        public string GetSizeString(HttpServerUtilityBase server)
        {
            FileInfo file = new FileInfo(GetPath(server, Project_Id, Name));
            const int B_PER_GB = 1024 * 1024 * 1024;
            const int B_PER_MB = 1024 * 1024;
            const int B_PER_KB = 1024;
            char nbsp = '\u00a0'; // Non-breaking space
            if ((file.Length / B_PER_GB) > 0)
                return string.Format("{0}{1}GB", Math.Round((file.Length / (float)B_PER_GB), 2), nbsp);
            else if ((file.Length / B_PER_MB) > 0)
                return string.Format("{0}{1}MB", Math.Round((file.Length / (float)B_PER_MB), 2), nbsp);
            else if ((file.Length / B_PER_KB) > 0)
                return string.Format("{0}{1}KB", Math.Round((file.Length / (float)B_PER_KB), 2), nbsp);
            else
                return string.Format("{0}{1}B", file.Length, nbsp);
        }

        public static string GetPath(HttpServerUtilityBase server, int projectId, string fileName)
        {
            return server.MapPath("~/App_Data/Attachments/" + projectId + "/" + fileName);
        }

        public string GetUrl(UrlHelper url)
        {
            return url.Content("~/App_Data/Attachments/" + Project_Id + "/" + Name);
        }

        #endregion // CUSTOM
    }
}
